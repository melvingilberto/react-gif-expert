{"version":3,"sources":["components/AddCategory.js","services/giphy.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","val","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GiftExpertApp","categories","setCategory","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAoCeA,MAjCf,YAA2C,IAAnBC,EAAkB,EAAlBA,cAAkB,EAEFC,mBAAS,IAFP,mBAE/BC,EAF+B,KAEnBC,EAFmB,KAiBtC,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvB,IAAMQ,EAAMR,EAAES,OAAOH,MACrBR,EAAeU,S,+BCNVE,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAYZM,GAZY,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAKN,IACtB,kCAAMA,EAAN,WCFCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAa,IAAD,EACXf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAerC,OATAC,qBAAW,WACPxB,EAASC,GAAWwB,MAAM,SAAAC,GACtBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAAEpB,IAEEqB,EDb0BK,CAAa1B,GAAjCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAErB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAsDhB,EAAtD,OACEoB,GAAW,mBAAGJ,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAACC,GACT,OACI,cAAC,EAAD,eAESA,GADEA,EAAIC,aEb9BgB,EAAgB,WAAO,IAAD,EAEG1C,mBAAS,CACvC,cAH2B,mBAExB2C,EAFwB,KAEZC,EAFY,KAU/B,OACI,gCACI,+CACA,uBAEA,cAAC,EAAD,CAAa7C,cAAiB6C,IAE9B,6BAEQD,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAYA,GADPA,YCblB8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.7b59263f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nfunction AddCategory( { setCategories } ) {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const handleInputChange = (e)=>{\r\n        const val = e.target.value;\r\n        setInputValue( val );\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 0){\r\n            setCategories( cats => [inputValue, ...cats] );\r\n            setInputValue(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit= {handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default AddCategory\r\n","\r\n\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=OXMSDQjnxkWwmmkYu4deYx1HUesR705B`;\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={ url } alt={title} />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\" > { category } </h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( (img) => {\r\n                        return (\r\n                            <GifGridItem\r\n                                key = {img.id}\r\n                                { ...img } \r\n                            />\r\n                        );\r\n                    } )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../services/giphy\";\r\n\r\n\r\nexport const useFetchGifs = (category) =>{\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    useEffect( ()=>{\r\n        getGifs( category ).then( imgs => {\r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        });\r\n    }, [ category ] );\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GiftExpertApp = () => {\r\n\r\n    const [categories, setCategory] = useState([\r\n        'One Punch'\r\n    ]);\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategory( cats => ['HunerxHunter', ...cats ] );\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <h2>GiftExpertApp</h2>\r\n            <hr />\r\n\r\n            <AddCategory setCategories = {setCategory}/>\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={category}\r\n                            category = {category} \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftExpertApp } from './GiftExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <GiftExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}